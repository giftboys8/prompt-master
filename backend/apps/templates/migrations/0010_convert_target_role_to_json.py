# Generated by Django 5.1.7 on 2025-04-03 13:41

from django.db import migrations, models
import json

def convert_target_role_to_list(apps, schema_editor):
    """将现有的target_role字符串转换为列表"""
    Template = apps.get_model('templates', 'Template')
    TemplateVersion = apps.get_model('templates', 'TemplateVersion')
    db_alias = schema_editor.connection.alias
    
    # 转换Template模型的数据
    for template in Template.objects.using(db_alias).all():
        try:
            if template.target_role and isinstance(template.target_role, str):
                # 直接使用SQL更新，避免JSON验证问题
                schema_editor.execute(
                    f"UPDATE templates_template SET target_role = '{json.dumps([template.target_role])}' WHERE id = {template.id}"
                )
            elif template.target_role is None:
                schema_editor.execute(
                    f"UPDATE templates_template SET target_role = '[]' WHERE id = {template.id}"
                )
        except Exception as e:
            print(f"Error converting Template {template.id}: {e}")
            schema_editor.execute(
                f"UPDATE templates_template SET target_role = '[]' WHERE id = {template.id}"
            )
    
    # 转换TemplateVersion模型的数据
    for version in TemplateVersion.objects.using(db_alias).all():
        try:
            if version.target_role and isinstance(version.target_role, str):
                schema_editor.execute(
                    f"UPDATE templates_templateversion SET target_role = '{json.dumps([version.target_role])}' WHERE id = {version.id}"
                )
            elif version.target_role is None:
                schema_editor.execute(
                    f"UPDATE templates_templateversion SET target_role = '[]' WHERE id = {version.id}"
                )
        except Exception as e:
            print(f"Error converting TemplateVersion {version.id}: {e}")
            schema_editor.execute(
                f"UPDATE templates_templateversion SET target_role = '[]' WHERE id = {version.id}"
            )

def reverse_convert(apps, schema_editor):
    """将列表转换回字符串（回滚操作）"""
    Template = apps.get_model('templates', 'Template')
    TemplateVersion = apps.get_model('templates', 'TemplateVersion')
    db_alias = schema_editor.connection.alias
    
    for template in Template.objects.using(db_alias).all():
        try:
            roles = template.target_role
            if roles and isinstance(roles, list) and len(roles) > 0:
                schema_editor.execute(
                    f"UPDATE templates_template SET target_role = '{roles[0]}' WHERE id = {template.id}"
                )
            else:
                schema_editor.execute(
                    f"UPDATE templates_template SET target_role = NULL WHERE id = {template.id}"
                )
        except Exception as e:
            print(f"Error reverting Template {template.id}: {e}")
            schema_editor.execute(
                f"UPDATE templates_template SET target_role = NULL WHERE id = {template.id}"
            )
    
    for version in TemplateVersion.objects.using(db_alias).all():
        try:
            roles = version.target_role
            if roles and isinstance(roles, list) and len(roles) > 0:
                schema_editor.execute(
                    f"UPDATE templates_templateversion SET target_role = '{roles[0]}' WHERE id = {version.id}"
                )
            else:
                schema_editor.execute(
                    f"UPDATE templates_templateversion SET target_role = NULL WHERE id = {version.id}"
                )
        except Exception as e:
            print(f"Error reverting TemplateVersion {version.id}: {e}")
            schema_editor.execute(
                f"UPDATE templates_templateversion SET target_role = NULL WHERE id = {version.id}"
            )


class Migration(migrations.Migration):

    dependencies = [
        ("templates", "0009_template_framework_templateversion_framework_and_more"),
    ]

    operations = [
        # 先创建临时字段
        migrations.AddField(
            model_name="template",
            name="target_role_json",
            field=models.JSONField(default=list, null=True, verbose_name="适用角色(JSON)"),
        ),
        migrations.AddField(
            model_name="templateversion",
            name="target_role_json",
            field=models.JSONField(default=list, null=True, verbose_name="适用角色(JSON)"),
        ),
        
        # 运行数据转换
        migrations.RunPython(convert_target_role_to_list, reverse_convert),
        
        # 删除旧字段
        migrations.RemoveField(
            model_name="template",
            name="target_role",
        ),
        migrations.RemoveField(
            model_name="templateversion",
            name="target_role",
        ),
        
        # 重命名新字段
        migrations.RenameField(
            model_name="template",
            old_name="target_role_json",
            new_name="target_role",
        ),
        migrations.RenameField(
            model_name="templateversion",
            old_name="target_role_json",
            new_name="target_role",
        ),
        
        # 更新字段属性
        migrations.AlterField(
            model_name="template",
            name="target_role",
            field=models.JSONField(default=list, verbose_name="适用角色"),
        ),
        migrations.AlterField(
            model_name="templateversion",
            name="target_role",
            field=models.JSONField(default=list, verbose_name="适用角色"),
        ),
    ]
