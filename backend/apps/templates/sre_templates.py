from apps.templates.models import Template
from django.contrib.auth import get_user_model
from frameworks.models import Framework

User = get_user_model()

def create_sre_templates(created_by=None):
    """
    创建SRE工程师相关的提示词模板
    :param created_by: 创建者（User实例）
    """
    if not created_by:
        created_by = User.objects.first()  # 获取第一个用户作为创建者
    if not created_by:
        raise ValueError("No user found to set as template creator")

    # 获取或创建SRE框架
    sre_framework, _ = Framework.objects.get_or_create(
        name="SRE",
        defaults={
            "description": "Site Reliability Engineering框架",
            "created_by": created_by
        }
    )

    templates = [
        {
            "name": "系统监控策略制定",
            "description": "制定全面的系统监控策略，包括服务器、网络、应用和数据库监控",
            "content": {
                "context": "你是一位经验丰富的运维工程师，负责制定公司核心业务系统的监控策略。",
                "objective": "设计一个全面且高效的监控方案，以确保系统的稳定性和性能。",
                "scope": "包括但不限于服务器硬件、网络、应用程序、数据库和安全方面的监控。",
                "tasks": [
                    "分析现有系统架构和潜在的风险点",
                    "确定关键性能指标（KPI）",
                    "选择合适的监控工具",
                    "设置告警阈值和升级流程"
                ],
                "action": "请详细说明你将如何执行上述任务，包括具体的监控项目、工具选择理由、告警策略等。",
                "result": "提供一份完整的监控策略文档，包括监控项目列表、工具配置建议、告警规则和升级流程。"
            },
            "variables": []
        },
        {
            "name": "容器化迁移方案",
            "description": "将传统应用迁移到容器化环境的完整方案",
            "content": {
                "context": "公司决定将传统的单体应用迁移到容器化环境，以提高系统的可扩展性和部署效率。",
                "objective": "制定一个全面的容器化迁移方案，确保平稳过渡且不影响现有业务。",
                "scope": "包括应用程序代码改造、基础设施准备、CI/CD流程调整、监控和日志系统适配等。",
                "tasks": [
                    "评估现有应用的依赖关系和架构",
                    "设计容器化架构和网络方案",
                    "规划数据持久化和状态管理策略",
                    "制定CI/CD流程的调整计划",
                    "设计新的监控和日志收集方案"
                ],
                "action": "详细描述每个任务的执行步骤，包括技术选型（如Docker、Kubernetes等）、潜在风险及其解决方案。",
                "result": "提供一份详细的容器化迁移方案文档，包括架构图、迁移步骤、时间线、风险评估和应对措施。"
            },
            "variables": []
        },
        {
            "name": "灾难恢复演练计划",
            "description": "设计和执行灾难恢复演练的完整计划",
            "content": {
                "context": "为了确保公司的业务连续性，需要定期进行灾难恢复演练。",
                "objective": "设计并执行一次全面的灾难恢复演练，验证现有的灾难恢复计划的有效性。",
                "scope": "包括核心业务系统、数据库、网络和基础设施的恢复。",
                "tasks": [
                    "制定详细的演练场景和步骤",
                    "定义成功标准和关键指标（如RTO、RPO）",
                    "分配角色和责任",
                    "准备所需的工具和资源",
                    "设计观察和记录方法"
                ],
                "action": "详细说明如何组织和执行这次演练，包括时间安排、参与人员、具体步骤和应急预案。",
                "result": "提供一份完整的灾难恢复演练报告，包括演练过程、遇到的问题、解决方案、达成的RTO和RPO，以及改进建议。"
            },
            "variables": []
        },
        {
            "name": "自动化部署流程优化",
            "description": "优化现有自动化部署流程，提高部署效率和成功率",
            "content": {
                "context": "当前的自动化部署流程存在效率低下和不稳定的问题，需要进行优化。",
                "objective": "重新设计和实现自动化部署流程，提高部署速度和成功率。",
                "scope": "包括代码构建、测试、打包、部署和回滚的全过程。",
                "tasks": [
                    "分析当前部署流程的瓶颈和问题点",
                    "设计新的自动化部署架构",
                    "选择和集成合适的CI/CD工具",
                    "实现环境一致性和配置管理",
                    "设计和实现自动化测试和质量检查"
                ],
                "action": "详细描述如何执行上述任务，包括工具选择（如Jenkins、GitLab CI、Ansible等）的理由，以及如何解决现有问题。",
                "result": "提供一份优化后的自动化部署流程文档，包括架构图、工具配置、部署步骤，以及与旧流程的对比分析（如部署时间、成功率的提升）。"
            },
            "variables": []
        },
        {
            "name": "性能调优方案",
            "description": "系统性能瓶颈分析与调优方案",
            "content": {
                "context": "公司的核心应用系统在高峰期出现了性能瓶颈，需要进行全面的性能调优。",
                "objective": "识别并解决系统的性能问题，提高系统的吞吐量和响应速度。",
                "scope": "包括应用程序代码、数据库、服务器配置、网络和缓存等各个层面。",
                "tasks": [
                    "收集和分析性能数据",
                    "识别主要的性能瓶颈",
                    "制定针对性的优化方案",
                    "实施优化措施",
                    "验证优化效果"
                ],
                "action": "详细说明如何执行性能分析和优化，包括使用的工具（如New Relic、Prometheus等）、优化技术（如代码重构、数据库索引优化、缓存策略等）和测试方法。",
                "result": "提供一份全面的性能调优报告，包括性能瓶颈分析、优化措施详情、before/after性能对比数据，以及长期性能监控建议。"
            },
            "variables": []
        },
        {
            "name": "安全加固方案",
            "description": "系统安全风险评估与加固方案",
            "content": {
                "context": "最近的安全审计发现了一些潜在的安全漏洞，需要对整个系统进行安全加固。",
                "objective": "设计并实施一个全面的安全加固方案，提高系统的安全性和抗攻击能力。",
                "scope": "包括网络安全、应用程序安全、数据安全、访问控制和日志审计等方面。",
                "tasks": [
                    "全面评估当前系统的安全状况",
                    "识别主要的安全风险和漏洞",
                    "制定针对性的安全加固措施",
                    "实施安全加固",
                    "进行安全测试和验证"
                ],
                "action": "详细描述如何执行上述任务，包括使用的安全工具和技术（如防火墙配置、漏洞扫描、加密方案等），以及如何平衡安全性和系统可用性。",
                "result": "提供一份完整的安全加固方案文档，包括风险评估报告、加固措施清单、实施步骤、安全测试结果，以及持续安全监控的建议。"
            },
            "variables": []
        },
        {
            "name": "日志管理系统优化",
            "description": "优化日志收集、存储和分析系统",
            "content": {
                "context": "当前的日志管理系统面临着数据量大、查询慢、存储成本高等问题，需要进行优化。",
                "objective": "重新设计和实现日志管理系统，提高日志的收集效率、查询速度和存储效率。",
                "scope": "包括日志收集、传输、存储、索引、查询和可视化等全流程。",
                "tasks": [
                    "评估当前日志系统的问题和瓶颈",
                    "设计新的日志管理架构",
                    "选择合适的日志管理工具和存储方案",
                    "实现日志的结构化和标准化",
                    "优化日志查询和分析功能"
                ],
                "action": "详细说明如何执行上述任务，包括工具选择（如ELK stack、Graylog等）的理由，日志结构化的方法，以及如何实现高效的日志查询和分析。",
                "result": "提供一份优化后的日志管理系统方案，包括系统架构图、工具配置指南、日志格式规范，以及与旧系统的对比分析（如查询速度提升、存储成本降低等）。"
            },
            "variables": []
        },
        {
            "name": "云迁移策略",
            "description": "系统从本地部署迁移到云平台的策略",
            "content": {
                "context": "公司决定将部分on-premise系统迁移到云平台，以提高灵活性和降低运维成本。",
                "objective": "制定一个全面的云迁移策略，确保系统平稳迁移到云环境并充分利用云的优势。",
                "scope": "包括应用系统、数据库、存储、网络等各个方面的迁移。",
                "tasks": [
                    "评估现有系统的云兼容性",
                    "选择合适的云服务提供商和服务类型",
                    "设计云上系统架构",
                    "制定数据迁移方案",
                    "规划迁移流程和时间表"
                ],
                "action": "详细描述如何执行上述任务，包括云平台选择（如AWS、Azure、GCP等）的理由，架构调整建议，以及如何处理迁移过程中的潜在风险。",
                "result": "提供一份完整的云迁移策略文档，包括云平台选型报告、迁移架构图、数据迁移方案、迁移时间表、风险评估和应对措施，以及迁移后的效益分析预测。"
            },
            "variables": []
        },
        {
            "name": "微服务拆分方案",
            "description": "单体应用向微服务架构转型的方案",
            "content": {
                "context": "公司决定将现有的单体应用拆分为微服务架构，以提高系统的可扩展性和维护性。",
                "objective": "设计一个合理的微服务拆分方案，并制定相应的实施计划。",
                "scope": "包括业务功能拆分、服务间通信、数据管理、部署策略等方面。",
                "tasks": [
                    "分析现有系统的业务功能和依赖关系",
                    "设计微服务的拆分粒度和边界",
                    "规划服务间的通信机制",
                    "设计数据管理和一致性策略",
                    "制定微服务的部署和运维方案"
                ],
                "action": "详细说明如何执行上述任务，包括服务拆分的原则，通信协议的选择（如REST、gRPC等），数据一致性的保证方法，以及如何处理微服务化带来的复杂性。",
                "result": "提供一份完整的微服务拆分方案，包括微服务架构图、服务清单及其职责描述、通信协议规范、数据管理策略、部署架构图，以及分阶段的实施计划。"
            },
            "variables": []
        },
        {
            "name": "容量规划和扩展方案",
            "description": "系统容量规划与扩展方案设计",
            "content": {
                "context": "随着业务的快速增长，需要对系统进行容量规划并制定扩展方案，以应对未来的访问量增长。",
                "objective": "制定一个全面的容量规划和系统扩展方案，确保系统能够平滑地应对业务增长。",
                "scope": "包括计算资源、存储、网络带宽、数据库等各个方面的规划。",
                "tasks": [
                    "分析历史数据和增长趋势",
                    "预测未来的资源需求",
                    "设计可扩展的系统架构",
                    "制定资源扩展的触发规则和流程",
                    "规划成本和预算"
                ],
                "action": "详细说明如何执行上述任务，包括使用的容量规划工具和方法，架构设计考虑（如水平扩展vs垂直扩展），以及如何实现自动化的资源伸缩。",
                "result": "提供一份完整的容量规划和扩展方案文档，包括需求预测报告、可扩展架构设计、资源配置建议、扩展流程和规则、成本预估，以及分阶段的实施计划。"
            },
            "variables": []
        }
    ]

    for template_data in templates:
        Template.objects.create(
            name=template_data["name"],
            description=template_data["description"],
            content=template_data["content"],
            variables=template_data["variables"],
            framework=sre_framework,
            framework_type="SRE",
            created_by=created_by,
            target_role="SRE工程师",
            visibility="PUBLIC"
        )

    print(f"成功创建{len(templates)}个运维工程师相关的提示词模板。")

if __name__ == "__main__":
    create_sre_templates()